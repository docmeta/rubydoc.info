services:
  web:
    image: 127.0.0.1:5000/docmeta/rubydoc-app
    build:
      context: .
      dockerfile: ./docker/app/Dockerfile
    environment:
      WEB_CONCURRENCY: 5
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./config/master.key:/app/config/master.key
      - ./config/credentials.yml.enc:/app/config/credentials.yml.enc
      - ./storage:/app/storage
    ports:
      - "0.0.0.0:80:80"
    deploy:
      replicas: 1
      update_config:
        order: start-first
    depends_on:
      - db
  jobs:
    image: 127.0.0.1:5000/docmeta/rubydoc-app
    build:
      context: .
      dockerfile: ./docker/app/Dockerfile
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./config/master.key:/app/config/master.key
      - ./config/credentials.yml.enc:/app/config/credentials.yml.enc
      - ./storage:/app/storage
    environment:
      RAILS_MAX_THREADS: 12
      DOCPARSE_MAX_BUILDS: 10
      DEFAULT_QUEUE_PROCESSES: 2
    entrypoint: ["./bin/jobs", "start"]
    deploy:
      replicas: 1
      update_config:
        order: start-first
    depends_on:
      - db
  db:
    image: postgres:alpine
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "db"]
      interval: 10s
      timeout: 5s
      retries: 3
    environment:
      POSTGRES_USER: db
      POSTGRES_PASSWORD: db
    volumes:
      - db1:/var/lib/postgresql/data
    deploy:
      replicas: 1
      update_config:
        order: start-first
      restart_policy:
        condition: on-failure
volumes:
  db1:
networks:
  default:
    driver: overlay
    attachable: true
